basePath: /api/v1
definitions:
  category.Category:
    properties:
      category_name:
        type: string
      id:
        type: integer
      image_url:
        type: string
      sub_categories:
        items:
          $ref: '#/definitions/category.SubCategory'
        type: array
    type: object
  category.Error:
    properties:
      error:
        example: category not found
        type: string
    type: object
  category.SubCategory:
    properties:
      category_id:
        type: integer
      sub_category_name:
        type: string
    type: object
  dto.FeaturedCategoryResponseDto:
    properties:
      category_name:
        example: Coding Basics
        type: string
      image_url:
        example: https://example.com/image.png
        type: string
    type: object
  learner.AddLearnerInterestsDto:
    properties:
      category_id:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    required:
    - category_id
    type: object
  learner.AddLearnerInterestsResponseDto:
    properties:
      message:
        example: interests added successfully
        type: string
    type: object
  learner.CreateLearnerBioDto:
    properties:
      bio:
        example: My bio
        type: string
      institution:
        example: Google
        type: string
      occupation:
        example: Software Engineer
        type: string
    type: object
  learner.CreateLearnerBioResponseDto:
    properties:
      message:
        example: bio added successfully
        type: string
    type: object
  learner.DeleteLearnerInterestsDto:
    properties:
      category_id:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    required:
    - category_id
    type: object
  learner.DeleteLearnerInterestsResponseDto:
    properties:
      message:
        example: interests deleted successfully
        type: string
    type: object
  learner.Error:
    properties:
      error:
        example: interest not found
        type: string
    type: object
  learner.GetLearnerInterestResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/learner.InterestOnlyDto'
        type: array
      message:
        example: interests retrieved successfully
        type: string
    type: object
  learner.InterestOnlyDto:
    properties:
      category_id:
        example: 1
        type: integer
      category_name:
        example: Development
        type: string
    type: object
  learner.UpdateLearnerBioDto:
    properties:
      bio:
        example: My bio
        type: string
      institution:
        example: Google
        type: string
      occupation:
        example: Software Engineer
        type: string
    type: object
  learner.UpdateLearnerBioResponseDto:
    properties:
      message:
        example: bio updated successfully
        type: string
    type: object
  mentor.Error:
    properties:
      error:
        type: string
    type: object
  mentor.GetMentorDetailsDto:
    properties:
      fullname:
        example: John Doe
        type: string
      image_url:
        example: https://example.com/image.jpg
        type: string
      mentor_bio:
        type: string
      mentor_experiences:
        items:
          $ref: '#/definitions/mentor_dto.MentorExperiences'
        type: array
      mentor_expertise:
        items:
          $ref: '#/definitions/mentor_dto.MentorExpertises'
        type: array
      occupation:
        example: Software Engineer
        type: string
      occupation:
        example: Software Engineer
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  mentor.MentorDetails:
    properties:
      fullname:
        example: John Doe
        type: string
      id:
        example: 1
        type: integer
      image_url:
        example: https://example.com/image.jpg
        type: string
      occupation:
        example: Software Engineer
        type: string
    type: object
  mentor.MentorLandingPageResponseDto:
    properties:
      countData:
        type: integer
      currentPage:
        type: integer
      data:
        items:
          $ref: '#/definitions/mentor.MentorDetails'
        type: array
      dataPerPage:
        type: integer
      message:
        example: success
        type: string
    type: object
  mentor_dto.MentorExperiences:
    properties:
      company_name:
        type: string
      end_date:
        example: "2022-01-01"
        type: string
      occupation:
        type: string
      start_date:
        type: string
    type: object
  mentor_dto.MentorExpertises:
    properties:
      category:
        type: string
      expertise:
        type: string
    type: object
  notification.Error:
    properties:
      error:
        type: string
    type: object
  notification.GetAllNotificationsResponseDto:
    properties:
      message:
        example: No notifications found
        type: string
      notification:
        items:
          $ref: '#/definitions/notification.Notif'
        type: array
    type: object
  notification.Notif:
    properties:
      is_read:
        example: false
        type: boolean
      message:
        example: schedule for python basic has been changed
        type: string
      type:
        example: schedule_change
        type: string
    type: object
  search.CategoryDetail:
    properties:
      category_name:
        type: string
    type: object
  search.Error:
    properties:
      message:
        type: string
    type: object
  search.MentorDetail:
    properties:
      email:
        type: string
      fullname:
        type: string
      image_url:
        type: string
    type: object
  search.SearchResponse:
    properties:
      mentors:
        items:
          $ref: '#/definitions/search.MentorDetail'
        type: array
      sessions:
        items:
          $ref: '#/definitions/search.SessionDetail'
        type: array
      topics:
        items:
          $ref: '#/definitions/search.CategoryDetail'
        type: array
    type: object
  search.SessionDetail:
    properties:
      image_url:
        type: string
      schedule:
        type: string
      short_description:
        type: string
      title:
        type: string
    type: object
  session.Error:
    properties:
      error:
        type: string
    type: object
  session.MentorDetails:
    properties:
      fullname:
        example: John Doe
        type: string
      id:
        example: 1
        type: integer
      image_url:
        example: https://example.com/image.jpg
        type: string
    type: object
  session.MentorSessionResponse:
    properties:
      mentor_details:
        $ref: '#/definitions/session.MentorDetails'
      mentor_session_title:
        type: string
      registered:
        type: boolean
      schedule:
        type: string
      short_description:
        type: string
    type: object
  user.ChangePasswordDto:
    properties:
      new_password:
        example: newPassword123
        type: string
      old_password:
        example: oldPassword123
        type: string
    required:
    - new_password
    - old_password
    type: object
  user.ChangePasswordResponseDto:
    properties:
      message:
        example: password changed successfully
        type: string
    type: object
  user.DeleteUserResponseDto:
    properties:
      message:
        example: user deleted successfully
        type: string
    type: object
  user.Error:
    properties:
      error:
        example: user not found
        type: string
    type: object
  user.GetUserResponseDto:
    properties:
      birth_date:
        example: "1990-01-01"
        type: string
      email:
        example: test@example.com
        type: string
      fullname:
        example: John Doe
        type: string
      id:
        example: 1
        type: integer
      image_url:
        example: https://example.com/image.jpg
        type: string
      is_mentor:
        example: true
        type: boolean
      phone_number:
        example: "123456789"
        type: string
    type: object
  user.LoginUserDto:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  user.LoginUserResponseDto:
    properties:
      access_token:
        example: eyAsgh435789
        type: string
      message:
        example: user logged in successfully
        type: string
      refresh_token:
        example: eyAsgh435789
        type: string
    type: object
  user.RegisterUserDto:
    properties:
      email:
        example: test@example.com
        type: string
      fullname:
        example: John Doe
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - fullname
    - password
    type: object
  user.RegisterUserResponseDto:
    properties:
      access_token:
        example: eyAsgh435789
        type: string
      message:
        example: user registered successfully
        type: string
      refresh_token:
        example: eyAsgh435789
        type: string
    type: object
  user.UpdateUserDetailsDto:
    properties:
      birth_date:
        example: "1990-02-01"
        type: string
      fullname:
        example: John Doe
        type: string
      image_url:
        example: https://example.com/image.jpg
        type: string
      phone_number:
        example: "123456789"
        type: string
    type: object
  user.UpdateUserDetailsResponseDto:
    properties:
      message:
        example: user details updated successfully
        type: string
    type: object
  user.UserProfileResponse:
    properties:
      email:
        type: string
      fullname:
        type: string
      id:
        type: integer
      image_url:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a Pijar API
  title: Pijar API
  version: "1.0"
paths:
  /categories:
    get:
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/category.Category'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/category.Error'
      summary: Get all categories
      tags:
      - Category
  /categories/featured:
    get:
      description: Get featured categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.FeaturedCategoryResponseDto'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/category.Error'
      summary: Get featured categories
      tags:
      - Category
  /learners/biographies:
    post:
      consumes:
      - application/json
      description: Create learner bio
      parameters:
      - description: bio
        in: body
        name: bio
        required: true
        schema:
          $ref: '#/definitions/learner.CreateLearnerBioDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/learner.CreateLearnerBioResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/learner.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/learner.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/learner.Error'
      security:
      - Bearer: []
      summary: Create learner bio
      tags:
      - Learner Bio
    put:
      consumes:
      - application/json
      description: Update learner bio
      parameters:
      - description: bio
        in: body
        name: bio
        required: true
        schema:
          $ref: '#/definitions/learner.UpdateLearnerBioDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learner.UpdateLearnerBioResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/learner.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/learner.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/learner.Error'
      security:
      - Bearer: []
      summary: Update learner bio
      tags:
      - Learner Bio
  /learners/interests:
    delete:
      consumes:
      - application/json
      description: Delete learner interests
      parameters:
      - description: User
        in: body
        name: interest
        required: true
        schema:
          $ref: '#/definitions/learner.DeleteLearnerInterestsDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learner.DeleteLearnerInterestsResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/learner.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/learner.Error'
      security:
      - Bearer: []
      summary: Delete learner interests
      tags:
      - Learner
    get:
      description: Get learner interests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learner.GetLearnerInterestResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/learner.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/learner.Error'
      security:
      - Bearer: []
      summary: Get learner interests
      tags:
      - Learner
    post:
      consumes:
      - application/json
      description: Add learner interests
      parameters:
      - description: User
        in: body
        name: interest
        required: true
        schema:
          $ref: '#/definitions/learner.AddLearnerInterestsDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learner.AddLearnerInterestsResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/learner.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/learner.Error'
      security:
      - Bearer: []
      summary: Add learner interests
      tags:
      - Learner
  /mentors/{mentor_id}:
    get:
      description: Get mentor details
      parameters:
      - description: mentor_id
        in: path
        name: mentor_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mentor.GetMentorDetailsDto'
        "400":
          description: Invalid mentor_id
          schema:
            $ref: '#/definitions/mentor.Error'
        "404":
          description: Mentor not found
          schema:
            $ref: '#/definitions/mentor.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/mentor.Error'
      summary: Get mentor details
      tags:
      - Mentor
  /mentors/landingpage:
    get:
      description: Get mentor landing page
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: pagesize
        in: query
        name: pagesize
        type: integer
      - description: categoryid
        in: query
        name: categoryid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mentor.MentorLandingPageResponseDto'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/mentor.Error'
      summary: Get mentor landing page
      tags:
      - Mentor
  /search:
    get:
      description: Search for sessions, mentors, and categories by keyword
      parameters:
      - description: Search Keyword
        in: query
        name: keyword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/search.SearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/search.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/search.Error'
      summary: Search for sessions, mentors, and categories
      tags:
      - Search
  /sessions/{user_id}:
    get:
      consumes:
      - application/json
      description: Get all sessions for a specific user by user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/session.MentorSessionResponse'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/session.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/session.Error'
      summary: Get sessions for a user
      tags:
      - Mentor
  /user/profile:
    get:
      description: Get the profile of the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/user.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.Error'
      summary: Get user profile
      tags:
      - User
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.LoginUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.LoginUserResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/user.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.Error'
      summary: Login user
      tags:
      - User
  /users/me:
    delete:
      description: Delete user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.DeleteUserResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/user.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.Error'
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get user details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.GetUserResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/user.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.Error'
      security:
      - Bearer: []
      summary: Get user details
      tags:
      - User
  /users/me/details:
    patch:
      consumes:
      - application/json
      description: Update user details
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserDetailsDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UpdateUserDetailsResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/user.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.Error'
      security:
      - Bearer: []
      summary: Update user details
      tags:
      - User
  /users/me/password:
    patch:
      consumes:
      - application/json
      description: Update user password
      parameters:
      - description: User
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/user.ChangePasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ChangePasswordResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/user.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.Error'
      security:
      - Bearer: []
      summary: Update user password
      tags:
      - User
  /users/notifications:
    get:
      description: Get all user's notifications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/notification.GetAllNotificationsResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/notification.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/notification.Error'
      security:
      - Bearer: []
      summary: Get all user's notifications
      tags:
      - Notification
  /users/register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.RegisterUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.RegisterUserResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/user.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.Error'
      summary: Register new user
      tags:
      - User
securityDefinitions:
  Bearer:
    description: '"Type ''Bearer TOKEN'' to correctly set the API Key"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
